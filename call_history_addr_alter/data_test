import os
import sys
import gc
import re
import smtplib
from pandas import Series, DataFrame
from email.mime.text import MIMEText
from email.header import Header
import pandas as pd
import time
import datetime
import threading
import webbrowser
from collections import  Iterator
import copy
from urllib import parse
import urllib.request
import operator
from collections import Counter
import logging
import itertools
import matplotlib.pyplot as plt
import numpy as np
import datetime
import dateutil.parser as dp
import pytz
import tkinter
import scrapy
from bs4 import BeautifulSoup
import math
import json
import requests
import pymysql
from dateutil.parser import parse
from functools import reduce
from pyspark.sql.types import *
from sklearn import linear_model
def mysql_connection(select_string):
    start = time.time()
    conn = pymysql.connect(host='rr-bp1jnr76z49y5k9mno.mysql.rds.aliyuncs.com', port=3306, user='qiandaodao',
                           passwd='qdddba@2017*', db='qiandaodao', charset='utf8',  cursorclass=pymysql.cursors.DictCursor)
    print('已经连接到数据库，请稍候...')
    cur = conn.cursor()
    cur.execute(select_string)
    data = DataFrame(cur.fetchall())
    # print(data)
    print('已经查询到数据，正在处理，请稍候...查询花费时间为%ds。' % (time.time() - start))
    # 提交
    conn.commit()
    # 关闭指针对象
    cur.close()
    # 关闭连接对象
    conn.close()
    return data


#通讯录
def address_test(mobile):
    select_string = '''
    SELECT users.id as user_id, users.mobile, users.create_time,  ab.device, ab.name, ab.mobile as book_mobile FROM qiandaodao.address_book as ab inner join users on ab.device = users.device
where users.mobile = '{mobile}'
    '''.format(mobile=mobile)
    data = mysql_connection(select_string)
    return data


#通话记录
def call_test(path_item):
    path = 'C:\\Users\\QDD\\Desktop\\operator\\operator\\'
    item_list = []
    with open(path+path_item, encoding='utf-8') as f1:
        data = json.load(f1)
    for num in data['calls']:
        data_new = pd.DataFrame(num['items'])
        item_list.append(data_new)
    data = pd.concat(item_list, ignore_index=True)
    data['mobile'] = path_item[0:11]
    print(path_item[0:11])
    data['create_time'] = address_test(path_item[0:11])['create_time'].values[0]
    print(data)
    # data.to_csv('C:\\Users\\QDD\\Desktop\\14769289807.csv', sep=',', encoding='gbk', index=False)
    return data

#得到近7天， 30天， 90天的通话记录
def time_call_data(data):
    create_time = str(data.ix[0,'create_time'])
    print('_______________________')
    time_tuple = time.strptime(create_time, '%Y-%m-%d %H:%M:%S')
    time_stamp = time.mktime(time_tuple)
    latest_7 = time_stamp - 7*24*3600
    latest_7_time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(latest_7))
    data_1 = data[data['time'] > latest_7_time]

    latest_30 = time_stamp - 30*24*3600
    latest_30_time = time.strftime('%Y-%m-%d %H:%M:%S',time.gmtime(latest_30))
    data_2 = data[data['time'] > latest_30_time]

    latest_90 = time_stamp - 90*24*3600
    latest_90_time = time.strftime('%Y-%m-%d %H:%M:%S',time.gmtime(latest_90))
    data_3 = data[data['time'] > latest_90_time]

    return [data_1, data_2, data_3]


#夜间通话次数
def night_call_times(data):
    #找到通话时间在1：00和4：00的通话记录
    data = data[(data['time'].str[-8:]<'04:00:00' ) & (data['time'].str[-8:]>'01:00:00' )]
    print('\n夜间通话次数：', data)
    times = len(data)
    return times


#有效手机号数量
def call_valid_num(data):
    print(data.dtypes)
    data['peer_number'] = data['peer_number'].astype('str')
    data_valid = data[data['peer_number'].str.match('1[3-9]\d{9}')]
    data_drop = data_valid.drop_duplicates('peer_number')
    print('\n去重后的有效手机号数量：', data_drop)
    return len(data_drop)







if __name__ == '__main__':
    path = 'C:\\Users\\QDD\\Desktop\\operator\\operator\\'
    file_list = os.listdir(path)
    #样本的号码
    mobile_list = []
    for item in file_list:
        mobile = item[0:11]
        mobile_list.append(mobile)
        call_data = call_test(item)
        address_data = address_test(mobile)
        #得到近七天， 30天， 90天的通话记录
        call_data_list = time_call_data(call_data)
        #7， 30， 90天通话记录对应的夜间通话次数, 总通话次数，有效手机号数量列表
        night_times_list = []
        call_times_list = []
        call_valid_num_list = []
        #遍历7， 30， 90天通话记录
        for call_item in call_data_list:
            night_times_list.append(night_call_times(call_item))
            call_times_list.append(len(call_item))
            call_valid_num_list.append(call_valid_num(call_item))
        print('**********************************************************************************************************')
        print('\n近7天，30天， 90天的夜间通话次数：', night_times_list)
        print('\n近7天，30天， 90天的总的通话次数：', call_times_list)
        print('\n近7天，30天， 90天的有效手机号码数：', call_valid_num_list)
        break

# with open('C:\\Users\\QDD\\Desktop\\operator\\operator\\13641293713_2018-01-08.json', encoding='utf-8') as f1:
#     data = json.load(f1)
# for key, values in data.items():
#     print(key, values)
#     print('\n\n************************************************************************')
# print(data['calls'][0].keys())
# data_new = pd.DataFrame(data['calls'][0]['items'])
# print(data_new)




